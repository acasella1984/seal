
package petstore.all
default allow = false
default deny = false
deny {
    input.verb == `deliver`
    re_match(`petstore.order`, input.type)
    input.ctx[i]["status"] == "delivered"
}

deny {
    seal_list_contains(seal_subject.groups, `regexp`)
    input.verb == `use`
    re_match(`petstore.*`, input.type)
    re_match(`@petstore.swagger.io$`, seal_subject.jti)
}

deny {
    seal_list_contains(seal_subject.groups, `everyone`)
    input.verb == `use`
    re_match(`petstore.*`, input.type)
    seal_subject.iss != "petstore.swagger.io"
}

deny {
    seal_list_contains(seal_subject.groups, `everyone`)
    input.verb == `buy`
    re_match(`petstore.pet`, input.type)
    input.ctx[i]["age"] <= 2
}

deny {
    seal_list_contains(seal_subject.groups, `banned`)
    input.verb == `manage`
    re_match(`petstore.*`, input.type)
}

deny {
    seal_list_contains(seal_subject.groups, `managers`)
    input.verb == `sell`
    re_match(`petstore.pet`, input.type)
    input.ctx[i]["status"] != "available"
}

deny {
    seal_list_contains(seal_subject.groups, `fussy`)
    input.verb == `buy`
    re_match(`petstore.pet`, input.type)
    not line7_not1_cnd
}

line7_not1_cnd {
    input.ctx[i]["neutered"]

    not line7_not2_cnd
}

line7_not2_cnd {
    input.ctx[i]["potty_trained"]
}

allow {
    seal_list_contains(seal_subject.groups, `fussy`)
    input.verb == `buy`
    re_match(`petstore.pet`, input.type)
    not line8_not1_cnd
}

line8_not1_cnd {
    input.ctx[i]["neutered"]
    input.ctx[i]["potty_trained"]
}

deny {
    seal_list_contains(seal_subject.groups, `everyone`)
    input.verb == `buy`
    re_match(`petstore.pet`, input.type)
    input.ctx[i]["tags"]["endangered"] == "true"
}

allow {
    seal_list_contains(seal_subject.groups, `operators`)
    input.verb == `use`
    re_match(`petstore.*`, input.type)
}

allow {
    seal_list_contains(seal_subject.groups, `managers`)
    input.verb == `manage`
    re_match(`petstore.*`, input.type)
}

allow {
    seal_subject.sub == `cto@petstore.swagger.io`
    input.verb == `manage`
    re_match(`petstore.*`, input.type)
}

allow {
    seal_list_contains(seal_subject.groups, `everyone`)
    input.verb == `inspect`
    re_match(`petstore.pet`, input.type)
}

allow {
    seal_list_contains(seal_subject.groups, `customers`)
    input.verb == `read`
    re_match(`petstore.pet`, input.type)
}

allow {
    seal_list_contains(seal_subject.groups, `customers`)
    input.verb == `buy`
    re_match(`petstore.pet`, input.type)
    input.ctx[i]["status"] == "available"
}

allow {
    seal_list_contains(seal_subject.groups, `breeders_maltese`)
    input.verb == `buy`
    re_match(`petstore.pet`, input.type)
    input.ctx[i]["status"] == "reserved"
    input.ctx[i]["breed"] == "maltese"
}

# rego functions defined by seal

# Helper to get the token payload.
seal_subject = payload {
    [header, payload, signature] := io.jwt.decode(input.jwt)
}

# seal_list_contains returns true if elem exists in list
seal_list_contains(list, elem) {
    list[_] = elem
}

